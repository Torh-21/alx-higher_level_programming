=====================================
Manual How to Use 2-matrix_divided.py
=====================================

This module defines an function divides all elements of a matrix ``matrix_divided(matrix, div)``.
``matrix_divided(...)``` returns the division of its two arguments. For numbers, that value is 
equivalent to using the ``/`` operator.

SUCCESSFUL TEST CONDITIONS
==========================

Testing the function with integer values
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
      >>> matrix = [
      ...     [5, 63, 12],
      ...     [6, 3, 56]
      ... ]
      >>> print(matrix_divided(matrix, 3))
      [[1.67, 21.0, 4.0], [2.0, 1.0, 18.67]]

Testing function with negative divisor
::
      >>> matrix_divided(matrix, -3)
      [[-1.67, -21.0, -4.0], [-2.0, -1.0, -18.67]]

Testing function with float numbers
::
      >>> matrix_divided(matrix, 1.2)
      [[4.17, 52.5, 10.0], [5.0, 2.50, 46.67]]

Testing function for matrix composed of several lists and the same length
::

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [5, 63, 4],
    ...     [6, 3, 56],
    ...     [8, 23, 5],
    ...     [21, 54, 6]
    ... ]
    >>> print(matrix_divided(matrix, 7.8))
    [[0.64, 8.08, 0.51], [0.77, 0.38, 7.18], [1.03, 2.95, 0.64], [2.69, 6.92, 0.77]]

TEST CONDITIONS WHERE AN ERROR IS RAISED
========================================

testing how function handles None argument
::
      >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
      >>> matrix_divided(None, None)
      Traceback (most recent call last):
      TypeError: matrix must be a matrix (list of lists) of integers/floats

      ::
      >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
      >>> matrix_divided([None], 2)
      Traceback (most recent call last):
      TypeError: matrix must be a matrix (list of lists) of integers/floats

testing how function handles incorrect matrix argument
	::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix_divided({9, 8, 7}, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

testing how function handles list of incorrect type
::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix_divided(["string"], 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats


testing how function handles rows of different lengths
	::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix_divided([[1, 2, 3], [4, 8, 7, 9], [2]], 1.5)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

testing how function handles division by 0
	::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix_divided([[1, 2, 3], [5, 6, 7]], 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

testing how function handles division by incorrect divisor type
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1, 2, 3], [5, 6, 7]], "25")
Traceback (most recent call last):
TypeError: div must be a number

