# 0-add_integer.txt

---------------------------------------
A manual on how to use 0-add_integer.py
---------------------------------------

This module defines the function prototype 0-add_integer(a, b=98). This
0-add_integer(...) takes only two arguments and returns the integer addition
of the arguments.

------------------
Procedure of Usage
------------------

>>> add_integer = __import__('0-add_integer').add_integer

    >>> add_integer(30, 70)
    100
    >>> add_integer(15, 17)
    32

The Function parameter(s) received can be float number

::

    >>> add_integer(30.1, 15.70)
    45
    >>> add_integer(15, 17.05)
    32

The Function parameter(s) received can be negative number

::

    >>> add_integer(-15, -27)
    -42
    >>> add_integer(35, -17.8)
    18

Since the default value of b is 98, 
The function can receive one parameter, still performs its operation

::

    >>> add_integer(30)
    128
    >>> add_integer(12.41)
    110

----------------------
Types of errors raised
----------------------

If the function receive string data

::
    >>> add_integer("hello world", 43)
    Traceback (most recent call last):
    TypeError: a must be an integer

The function parameter can't be None/Empty, at least one parameter must be supplied.

::
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

If parameter 'b' is None

::
    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both parameters are neither integer nor float the error will be the following

::
    >>> add_integer("holberton", "school")
    Traceback (most recent call last):
    TypeError: a must be an integer

Cannot convert float NaN to integer

 ::
    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer


If the function receives as parameter float('inf')

::
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(-float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
